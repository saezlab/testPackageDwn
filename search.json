[{"path":"https://saezlab.github.io/testPackageDwn/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 testPackageDwn authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://saezlab.github.io/testPackageDwn/articles/My_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Vignette Title","text":"just test Let’s use car dataset illustrate use function testFunction:","code":"mtcars %>% head() #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://saezlab.github.io/testPackageDwn/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://saezlab.github.io/testPackageDwn/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). testPackageDwn: Package (One Line, Title Case). R package version 0.0.0.9000, https://saezlab.github.io/testPackageDwn/.","code":"@Manual{,   title = {testPackageDwn: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://saezlab.github.io/testPackageDwn/}, }"},{"path":"https://saezlab.github.io/testPackageDwn/index.html","id":"testpackagedwn","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal testPackageDwn …","code":""},{"path":"https://saezlab.github.io/testPackageDwn/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version testPackageDwn like :","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"https://saezlab.github.io/testPackageDwn/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(testPackageDwn) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"installation-and-dependency","dir":"","previous_headings":"","what":"Installation and dependency","title":"COSMOS-tutorial","text":"COSMOS dependent CARNIVAL exhibiting signalling pathway optimisation. CARNIVAL requires interactive version IBM Cplex CBC-COIN solver network optimiser. IBM ILOG Cplex freely available Academic Initiative . CBC solver open source freely available user, significantly lower performance CPLEX. Obtain CBC executable directly usable cosmos . Alternatively small networks, users can rely freely available lpSolve R-package, automatically installed package. tutorial use lpSolve, strongly recommend obtain license CPLEX.","code":"# install from bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"cosmosR\")   # install the newest (development) version from GitHub # install.packages(\"remotes\") # install CARNIVAL from github  remotes::install_github(\"saezlab/CARNIVAL\") remotes::install_github(\"saezlab/cosmosR\")"},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"COSMOS-tutorial","text":"COSMOS (Causal Oriented Search Multi-Omic Space) method integrates phosphoproteomics, transcriptomics, metabolomics data sets. COSMOS leverages extensive prior knowledge signaling pathways, metabolic networks, gene regulation computational methods estimate activities transcription factors kinases well network-level causal reasoning. pipeline can provide mechanistic explanations experimental observations across multiple omic data sets. Essentially, COSMOS 3 main components: prior knowledge: goal COSMOS essentially connect various deregulation events together mechanistic hypotheses. mechanistic hypotheses basically known potential interactions molecular biology features, proteins metabolites. example interaction can activation MTOR AKT, EGFR canonical pathway. Thousands potential interaction can assembled together form large network interactions. networks thus called prior knowledge networks (PKN), summarize large amounts prior knowledge form network. context COSMOS interactions come Omnipath database, STICHdb recon3D reaction network. respect example interaction MTOR AKT, question usually asked presented given experimental context : MTOR can activate AKT general, interaction relevant experimental context? brings us second component COSMOS. data: Information deregulated transcription factors (TF), kinases/phosphophatases metabolites can extracted transcriptomic, phospho-proteomic metabolomic data respectively, using footprint analysis methods (see:https://github.com/saezlab/transcriptutorial (Especially chapter 4)). information can quite useful , characterize TFs kinases specifically deregulated cancer cells example. goal COSMOS find different deregulation events can connected together. Going back example MTOR AKT, know AKT can potentially activate MTOR, observe data AKT MTOR significantly activated cancer tissue compared healthy counterpart, reasonable chance interaction active cancer tissue ’m studying. problem data often contain information hundreds -regulated activities time, thousands potential interactions can potentially explain . order find optimal set interactions relevant explain deregulation observed data, algorithm needed. algorithm: problem described data part formulated integer linear optimisation problem. PKN data can abstracted large set integer variables operating together even larger set equations (see https://www.nature.com/articles/s41540-019-0118-z info). Given set fixed value variable (, subset known deregulation), need find values sets variable (corresponding proteins metabolites information data) can lead satisfying result. satisfying results context COSMOS represent sub-network interactions small possible coherently explaining many known deregulation possible. Thus, set equation mentioned earlier needs solved, using integer linear programming solver. solvers currently available COSMOS lpsolve, cbc cplex. general, CPLEX preferred CBC real case applications, lpsolve mainly used testing small networks sets measurements.","code":""},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"tutorial-section-signaling-to-metabolism","dir":"","previous_headings":"","what":"Tutorial section: signaling to metabolism","title":"COSMOS-tutorial","text":"First, load package part, can set options CARNIVAL run, timelimit min gap tolerance. user provide path CPLEX/cbc executable. can check CARNIVAL_options variable see possible options can adjusted example, use built-solver lpSolve. User aware lpSolve used TESTS. obtain meaningful results, best solver cplex, cbc possible. next section, prepare input run cosmosR. signaling inputs result footprint based TF kinase activity estimation. info TF activity estimation transcriptomic data, see:https://github.com/saezlab/transcriptutorial (Especially chapter 4) use toy PKN, see full meta PKN, can load data(meta_network). see meta_PKN assembled, see: https://github.com/saezlab/meta_PKN_BIGG.git metabolites prior knowledge network identified XMetab__HMDBid_compartment XMetab__BIGGid_compartment (example “Metab__HMDB0000190_c”). compartment code BIGG model standard (r, c, e, x, m, l, n, g). Thus first need map whatever identifier metabolite data one network. Genes identified gene symboles (signaling part network) Gene####__symbole (reaction network part network). maximum network depth define maximum number step downstream kinase/TF COSMOS look deregulated metabolites. Good first guess max depth around 4 6 (15 toy dataset) differential experession data used filter wrong TF-target interactions context pre-optimisation. list genes differential expression data also used reference define genes expressed (genes diff_expression_data considered expressed, genes diff_expression_data removed network). , CARNIVAL_options$timelimit set pre-optimisation. Indeed, “filter_tf_gene_interaction_by_optimization” parameter “preprocess_COSMOS_signaling_to_metabolism” function set TRUE, COSMOS can perform first optimisation run order generate preliminary solution network can used filtering incoherences TF activities downstream target expressions. part, can set options actual run, timelimit min gap tolerance. running time much higher pre-optimisation. can increase number threads use many available CPUs. cosmosR run. Finally, process results first cosmosR run, translate gene names metabolites name.","code":"library(cosmosR) CARNIVAL_options <- default_CARNIVAL_options(solver = \"lpSolve\")  # To use CBC # CARNIVAL_options <- default_CARNIVAL_options(solver = \"cbc\") # CARNIVAL_options$solverPath <- \"~/Documents/cbc\" # CARNIVAL_options$threads <- 2 # CARNIVAL_options$mipGAP <- 0.05  # To use CPLEX: # CARNIVAL_options <- default_CARNIVAL_options(solver = \"cplex\") # CARNIVAL_options$solverPath <- \"C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe\" # CARNIVAL_options$threads <- 2 # CARNIVAL_options$mipGAP <- 0.05   CARNIVAL_options$timelimit <- 3600 data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,                                         signaling_data = toy_signaling_input,                                         metabolic_data = toy_metabolic_input,                                                       diff_expression_data = toy_RNA,                                                       maximum_network_depth = 15,                                                       remove_unexpressed_nodes = TRUE,                                                       CARNIVAL_options = CARNIVAL_options) ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" ## [1] \"COSMOS: removing unexpressed nodes from PKN...\" ## [1] \"COSMOS: 0 interactions removed\" ## [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" ## [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" ## [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" CARNIVAL_options$timelimit <- 14400 CARNIVAL_options$mipGAP <- 0.05 CARNIVAL_options$threads <- 2 test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,                                                       CARNIVAL_options = CARNIVAL_options) ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" formated_result_for <- format_COSMOS_res(test_result_for)"},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"tutorial-section-metabolism-to-signaling","dir":"","previous_headings":"","what":"Tutorial section: metabolism to signaling","title":"COSMOS-tutorial","text":"run metabolism signaling part, need prepare inputs. Now correct time set pre-optimisation run, can prepare inputs. can run cosmosR connect metabolism signaling. running time usually needs longer, problem seems harder solve CPLEX. Finally can format result backward run well (forward run)","code":"CARNIVAL_options$timelimit <- 3600 CARNIVAL_options$mipGAP <- 0.05 CARNIVAL_options$threads <- 2 test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,                                         signaling_data = toy_signaling_input,                                         metabolic_data = toy_metabolic_input,                                                        diff_expression_data = toy_RNA,                                                        maximum_network_depth = 15,                                                        remove_unexpressed_nodes = FALSE,                                                        CARNIVAL_options = CARNIVAL_options) ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" ## [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" ## [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" ## [1] \"COSMOS: 54 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: 1 input/measured nodes are not in PKN any more: Metab__HMDB0000190_c and 0 more.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 1 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" CARNIVAL_options$timelimit <- 28800  test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,                                                        CARNIVAL_options = CARNIVAL_options) ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" formated_result_back <- format_COSMOS_res(test_result_back)"},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"tutorial-section-merge-forward-and-backward-networks-and-visualise-network","dir":"","previous_headings":"","what":"Tutorial section: Merge forward and backward networks and visualise network","title":"COSMOS-tutorial","text":"simply take union forward backward runs create full network solution lopping signaling, gene-regulation metabolism. Since overlap result network forward backward run, may optionally want check node sign incoherent overlap two solutions. function generate dynamic network plot centered given node network solution, connecting measured nodes given range (7 steps). network can intepreted (purely illustrative, interaction may incorectly signed lpsolve can use positive interactions): network represents flow activities can connect MYC -regulation Glucitol (Sorbitol) accumulation. , NFKB1 can upregulate expression SLC2A1, turn transport glucose cytoplasm. increase transport glucose can lead glucose avlaible conversion glucitol AKR1A enzyme. Interestingly, glucitol now activator MAPK14, thus leading appearance positive feedback loop connecting MYC, glucitol MAPK14. important understand links hypothetical. come larger pool potential molecular interactions present multiple online databases compiled omnipath, STITCH recon metabolic network. exist literature interactions known potentially exists experimental contexts. Thus, COSMOS compile potential interactions together proposes coherent set can explain data hand. links however considered potential mechanistic connections, need confirmed experimentally. interactions can searched literature see disease experimental context shown relevant. Taken together, multiple interactions can help build biological story can guide underatanding underlying biology decide future experiments.","code":"full_sif <- as.data.frame(rbind(formated_result_for[[1]], formated_result_back[[1]])) full_sif <- full_sif[full_sif$Weight>0,] full_attributes <- as.data.frame(rbind(formated_result_for[[2]], formated_result_back[[2]]))  full_sif <- unique(full_sif) full_attributes <- unique(full_attributes) network_plot <- display_node_neighboorhood(central_node = 'Metab__D-Glucitol_c',                                             sif = full_sif,                                             att = full_attributes,                                             n = 7)  network_plot"},{"path":"https://saezlab.github.io/testPackageDwn/tutorial.html","id":"tutorial-section-over-representation-analysis","dir":"","previous_headings":"","what":"Tutorial section: Over Representation Analysis","title":"COSMOS-tutorial","text":"Often useful perform Representation Analysis (ORA) resulting nodes COSMOS network first analysis step get functional interpretation modeled signaling cascade. common way test whether selected genes (nodes) COSMOS solution network show statistically significant differences comparison prior-knowledge network (PKN). differentially expressed genes give information cellular processes deregulated proportions various pathways SIGNIFICANTLY different expected.way significant differences two biological conditions (e.g. cancer vs. normal tissue, treatment vs. untreated cells) can shown. Algorithms perform ORA implemented R packages like piano decoupleR. addition gene set collection algorithms require two different lists inputs: - nodes COSMOS solution network relate back input data (e.g. transcriptomics, proteomics, metabolomics, fluxomics, perturbations) - nodes (kinases, transcription factors, metabolites) prior-knowledge network (used background analysis) section show obtain two lists formated COSMOS result object. Now forward backward sets can used ORA analysis.","code":"sif_forward = formated_result_for[[1]] att_forward = formated_result_for[[2]] nodes_ORA = extract_nodes_for_ORA(     sif = sif_forward,      att = att_forward) sessionInfo() ## R version 4.4.0 (2024-04-24) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cosmosR_1.9.1 ##  ## loaded via a namespace (and not attached): ##  [1] bcellViper_1.40.0   sass_0.4.9          utf8_1.2.4          ##  [4] generics_0.1.3      tidyr_1.3.1         lpSolve_5.6.20      ##  [7] stringi_1.8.4       lattice_0.22-6      hms_1.1.3           ## [10] digest_0.6.35       magrittr_2.0.3      evaluate_0.23       ## [13] grid_4.4.0          fastmap_1.2.0       jsonlite_1.8.8      ## [16] Matrix_1.7-0        progress_1.2.3      purrr_1.0.2         ## [19] fansi_1.0.6         codetools_0.2-20    textshaping_0.4.0   ## [22] jquerylib_0.1.4     cli_3.6.2           rlang_1.1.3         ## [25] decoupleR_2.10.0    crayon_1.5.2        visNetwork_2.1.2    ## [28] parallelly_1.37.1   bit64_4.0.5         withr_3.0.0         ## [31] cachem_1.1.0        yaml_2.3.8          tools_4.4.0         ## [34] parallel_4.4.0      tzdb_0.4.0          BiocParallel_1.38.0 ## [37] memoise_2.0.1       dplyr_1.1.4         vctrs_0.6.5         ## [40] R6_2.5.1            lifecycle_1.0.4     stringr_1.5.1       ## [43] bit_4.0.5           fs_1.6.4            htmlwidgets_1.6.4   ## [46] vroom_1.6.5         ragg_1.3.2          pkgconfig_2.0.3     ## [49] desc_1.4.3          pkgdown_2.0.9       pillar_1.9.0        ## [52] bslib_0.7.0         glue_1.7.0          systemfonts_1.1.0   ## [55] xfun_0.44           tibble_3.2.1        tidyselect_1.2.1    ## [58] CARNIVAL_2.14.0     knitr_1.47          dorothea_1.16.0     ## [61] rjson_0.2.21        igraph_2.0.3        htmltools_0.5.8.1   ## [64] rmarkdown_2.27      readr_2.1.5         compiler_4.4.0      ## [67] prettyunits_1.2.0"}]
